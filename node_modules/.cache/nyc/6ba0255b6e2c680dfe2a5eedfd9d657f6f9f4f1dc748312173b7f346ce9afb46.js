var cov_e0av3ywt9=function(){var path="/Users/Tyler/ganache-fork/ganache-core/lib/utils/transaction.js";var hash="e8305b1ddbb635632adc95e381f791c4e9cdf741";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/Tyler/ganache-fork/ganache-core/lib/utils/transaction.js",statementMap:{"0":{start:{line:1,column:30},end:{line:1,column:54}},"1":{start:{line:2,column:34},end:{line:2,column:63}},"2":{start:{line:3,column:16},end:{line:3,column:42}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:12},end:{line:5,column:26}},"5":{start:{line:6,column:11},end:{line:6,column:26}},"6":{start:{line:8,column:13},end:{line:8,column:49}},"7":{start:{line:9,column:17},end:{line:18,column:1}},"8":{start:{line:14,column:2},end:{line:16,column:3}},"9":{start:{line:15,column:4},end:{line:15,column:22}},"10":{start:{line:17,column:2},end:{line:17,column:73}},"11":{start:{line:19,column:20},end:{line:19,column:36}},"12":{start:{line:22,column:16},end:{line:22,column:45}},"13":{start:{line:23,column:21},end:{line:23,column:67}},"14":{start:{line:25,column:2},end:{line:35,column:5}},"15":{start:{line:27,column:6},end:{line:27,column:33}},"16":{start:{line:28,column:6},end:{line:28,column:30}},"17":{start:{line:29,column:6},end:{line:29,column:104}},"18":{start:{line:30,column:6},end:{line:30,column:31}},"19":{start:{line:33,column:6},end:{line:33,column:34}},"20":{start:{line:54,column:2},end:{line:54,column:21}},"21":{start:{line:55,column:21},end:{line:55,column:63}},"22":{start:{line:56,column:2},end:{line:56,column:76}},"23":{start:{line:56,column:36},end:{line:56,column:74}},"24":{start:{line:62,column:23},end:{line:62,column:63}},"25":{start:{line:64,column:2},end:{line:75,column:5}},"26":{start:{line:66,column:6},end:{line:66,column:35}},"27":{start:{line:68,column:19},end:{line:68,column:44}},"28":{start:{line:69,column:20},end:{line:69,column:47}},"29":{start:{line:70,column:6},end:{line:72,column:7}},"30":{start:{line:71,column:8},end:{line:71,column:20}},"31":{start:{line:73,column:6},end:{line:73,column:33}},"32":{start:{line:77,column:2},end:{line:100,column:3}},"33":{start:{line:82,column:4},end:{line:93,column:7}},"34":{start:{line:87,column:8},end:{line:91,column:9}},"35":{start:{line:88,column:10},end:{line:88,column:43}},"36":{start:{line:90,column:10},end:{line:90,column:26}},"37":{start:{line:95,column:4},end:{line:97,column:5}},"38":{start:{line:96,column:6},end:{line:96,column:26}},"39":{start:{line:99,column:4},end:{line:99,column:23}},"40":{start:{line:109,column:2},end:{line:152,column:3}},"41":{start:{line:110,column:4},end:{line:112,column:5}},"42":{start:{line:111,column:6},end:{line:111,column:29}},"43":{start:{line:113,column:4},end:{line:115,column:5}},"44":{start:{line:114,column:6},end:{line:114,column:30}},"45":{start:{line:116,column:17},end:{line:116,column:19}},"46":{start:{line:117,column:4},end:{line:151,column:5}},"47":{start:{line:118,column:6},end:{line:120,column:7}},"48":{start:{line:119,column:8},end:{line:119,column:58}},"49":{start:{line:123,column:6},end:{line:125,column:9}},"50":{start:{line:124,column:8},end:{line:124,column:52}},"51":{start:{line:126,column:11},end:{line:151,column:5}},"52":{start:{line:127,column:19},end:{line:127,column:36}},"53":{start:{line:128,column:6},end:{line:141,column:9}},"54":{start:{line:129,column:8},end:{line:131,column:9}},"55":{start:{line:130,column:10},end:{line:130,column:36}},"56":{start:{line:132,column:8},end:{line:140,column:9}},"57":{start:{line:133,column:10},end:{line:135,column:11}},"58":{start:{line:134,column:12},end:{line:134,column:38}},"59":{start:{line:136,column:15},end:{line:140,column:9}},"60":{start:{line:137,column:10},end:{line:139,column:11}},"61":{start:{line:138,column:12},end:{line:138,column:42}},"62":{start:{line:146,column:6},end:{line:148,column:7}},"63":{start:{line:147,column:8},end:{line:147,column:76}},"64":{start:{line:150,column:6},end:{line:150,column:38}},"65":{start:{line:155,column:0},end:{line:355,column:2}},"66":{start:{line:162,column:4},end:{line:162,column:12}},"67":{start:{line:164,column:4},end:{line:164,column:21}},"68":{start:{line:166,column:4},end:{line:166,column:25}},"69":{start:{line:167,column:4},end:{line:167,column:25}},"70":{start:{line:172,column:4},end:{line:176,column:6}},"71":{start:{line:187,column:4},end:{line:196,column:5}},"72":{start:{line:189,column:18},end:{line:189,column:36}},"73":{start:{line:190,column:6},end:{line:195,column:7}},"74":{start:{line:192,column:8},end:{line:192,column:51}},"75":{start:{line:194,column:8},end:{line:194,column:24}},"76":{start:{line:197,column:17},end:{line:197,column:40}},"77":{start:{line:198,column:20},end:{line:209,column:5}},"78":{start:{line:211,column:15},end:{line:211,column:45}},"79":{start:{line:212,column:4},end:{line:212,column:55}},"80":{start:{line:213,column:4},end:{line:213,column:14}},"81":{start:{line:221,column:23},end:{line:234,column:5}},"82":{start:{line:235,column:4},end:{line:235,column:22}},"83":{start:{line:239,column:4},end:{line:239,column:75}},"84":{start:{line:243,column:4},end:{line:243,column:79}},"85":{start:{line:257,column:4},end:{line:261,column:5}},"86":{start:{line:258,column:6},end:{line:258,column:26}},"87":{start:{line:260,column:6},end:{line:260,column:25}},"88":{start:{line:262,column:4},end:{line:262,column:39}},"89":{start:{line:270,column:4},end:{line:270,column:32}},"90":{start:{line:271,column:4},end:{line:271,column:42}},"91":{start:{line:280,column:17},end:{line:280,column:28}},"92":{start:{line:282,column:27},end:{line:282,column:31}},"93":{start:{line:283,column:4},end:{line:288,column:5}},"94":{start:{line:283,column:17},end:{line:283,column:18}},"95":{start:{line:283,column:27},end:{line:283,column:45}},"96":{start:{line:283,column:51},end:{line:283,column:62}},"97":{start:{line:284,column:6},end:{line:287,column:7}},"98":{start:{line:285,column:8},end:{line:285,column:29}},"99":{start:{line:286,column:8},end:{line:286,column:14}},"100":{start:{line:290,column:23},end:{line:305,column:5}},"101":{start:{line:307,column:4},end:{line:307,column:22}},"102":{start:{line:331,column:4},end:{line:350,column:5}},"103":{start:{line:332,column:6},end:{line:332,column:23}},"104":{start:{line:335,column:22},end:{line:335,column:35}},"105":{start:{line:336,column:6},end:{line:349,column:7}},"106":{start:{line:337,column:25},end:{line:337,column:41}},"107":{start:{line:339,column:8},end:{line:339,column:25}},"108":{start:{line:340,column:8},end:{line:340,column:19}},"109":{start:{line:341,column:8},end:{line:341,column:19}},"110":{start:{line:343,column:8},end:{line:343,column:25}},"111":{start:{line:344,column:8},end:{line:344,column:28}},"112":{start:{line:346,column:8},end:{line:346,column:32}},"113":{start:{line:348,column:8},end:{line:348,column:37}},"114":{start:{line:353,column:4},end:{line:353,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:17},end:{line:9,column:18}},loc:{start:{line:9,column:28},end:{line:18,column:1}},line:9},"1":{name:"configZeroableField",decl:{start:{line:21,column:9},end:{line:21,column:28}},loc:{start:{line:21,column:62},end:{line:36,column:1}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:9},end:{line:26,column:10}},loc:{start:{line:26,column:16},end:{line:31,column:5}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:32,column:9},end:{line:32,column:10}},loc:{start:{line:32,column:15},end:{line:34,column:5}},line:32},"4":{name:"fixProps",decl:{start:{line:44,column:9},end:{line:44,column:17}},loc:{start:{line:44,column:28},end:{line:101,column:1}},line:44},"5":{name:"(anonymous_5)",decl:{start:{line:56,column:21},end:{line:56,column:22}},loc:{start:{line:56,column:36},end:{line:56,column:74}},line:56},"6":{name:"(anonymous_6)",decl:{start:{line:65,column:9},end:{line:65,column:10}},loc:{start:{line:65,column:16},end:{line:74,column:5}},line:65},"7":{name:"(anonymous_7)",decl:{start:{line:86,column:11},end:{line:86,column:12}},loc:{start:{line:86,column:20},end:{line:92,column:7}},line:86},"8":{name:"initData",decl:{start:{line:108,column:9},end:{line:108,column:17}},loc:{start:{line:108,column:28},end:{line:153,column:1}},line:108},"9":{name:"(anonymous_9)",decl:{start:{line:123,column:19},end:{line:123,column:20}},loc:{start:{line:123,column:29},end:{line:125,column:7}},line:123},"10":{name:"(anonymous_10)",decl:{start:{line:128,column:25},end:{line:128,column:26}},loc:{start:{line:128,column:41},end:{line:141,column:7}},line:128},"11":{name:"(anonymous_11)",decl:{start:{line:161,column:2},end:{line:161,column:3}},loc:{start:{line:161,column:51},end:{line:168,column:3}},line:161},"12":{name:"(anonymous_12)",decl:{start:{line:170,column:2},end:{line:170,column:3}},loc:{start:{line:170,column:21},end:{line:177,column:3}},line:170},"13":{name:"(anonymous_13)",decl:{start:{line:185,column:2},end:{line:185,column:3}},loc:{start:{line:185,column:30},end:{line:214,column:3}},line:185},"14":{name:"(anonymous_14)",decl:{start:{line:220,column:2},end:{line:220,column:3}},loc:{start:{line:220,column:11},end:{line:236,column:3}},line:220},"15":{name:"(anonymous_15)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:11},end:{line:240,column:3}},line:238},"16":{name:"(anonymous_16)",decl:{start:{line:242,column:2},end:{line:242,column:3}},loc:{start:{line:242,column:13},end:{line:244,column:3}},line:242},"17":{name:"(anonymous_17)",decl:{start:{line:255,column:2},end:{line:255,column:3}},loc:{start:{line:255,column:31},end:{line:263,column:3}},line:255},"18":{name:"(anonymous_18)",decl:{start:{line:269,column:2},end:{line:269,column:3}},loc:{start:{line:269,column:9},end:{line:272,column:3}},line:269},"19":{name:"(anonymous_19)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:279,column:19},end:{line:308,column:3}},line:279},"20":{name:"(anonymous_20)",decl:{start:{line:324,column:2},end:{line:324,column:3}},loc:{start:{line:324,column:32},end:{line:354,column:3}},line:324}},branchMap:{"0":{loc:{start:{line:14,column:2},end:{line:16,column:3}},type:"if",locations:[{start:{line:14,column:2},end:{line:16,column:3}},{start:{line:14,column:2},end:{line:16,column:3}}],line:14},"1":{loc:{start:{line:21,column:44},end:{line:21,column:60}},type:"default-arg",locations:[{start:{line:21,column:58},end:{line:21,column:60}}],line:21},"2":{loc:{start:{line:70,column:6},end:{line:72,column:7}},type:"if",locations:[{start:{line:70,column:6},end:{line:72,column:7}},{start:{line:70,column:6},end:{line:72,column:7}}],line:70},"3":{loc:{start:{line:73,column:20},end:{line:73,column:32}},type:"binary-expr",locations:[{start:{line:73,column:20},end:{line:73,column:27}},{start:{line:73,column:31},end:{line:73,column:32}}],line:73},"4":{loc:{start:{line:77,column:2},end:{line:100,column:3}},type:"if",locations:[{start:{line:77,column:2},end:{line:100,column:3}},{start:{line:77,column:2},end:{line:100,column:3}}],line:77},"5":{loc:{start:{line:87,column:8},end:{line:91,column:9}},type:"if",locations:[{start:{line:87,column:8},end:{line:91,column:9}},{start:{line:87,column:8},end:{line:91,column:9}}],line:87},"6":{loc:{start:{line:95,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:95,column:4},end:{line:97,column:5}},{start:{line:95,column:4},end:{line:97,column:5}}],line:95},"7":{loc:{start:{line:95,column:8},end:{line:95,column:25}},type:"binary-expr",locations:[{start:{line:95,column:8},end:{line:95,column:12}},{start:{line:95,column:16},end:{line:95,column:25}}],line:95},"8":{loc:{start:{line:109,column:2},end:{line:152,column:3}},type:"if",locations:[{start:{line:109,column:2},end:{line:152,column:3}},{start:{line:109,column:2},end:{line:152,column:3}}],line:109},"9":{loc:{start:{line:110,column:4},end:{line:112,column:5}},type:"if",locations:[{start:{line:110,column:4},end:{line:112,column:5}},{start:{line:110,column:4},end:{line:112,column:5}}],line:110},"10":{loc:{start:{line:113,column:4},end:{line:115,column:5}},type:"if",locations:[{start:{line:113,column:4},end:{line:115,column:5}},{start:{line:113,column:4},end:{line:115,column:5}}],line:113},"11":{loc:{start:{line:117,column:4},end:{line:151,column:5}},type:"if",locations:[{start:{line:117,column:4},end:{line:151,column:5}},{start:{line:117,column:4},end:{line:151,column:5}}],line:117},"12":{loc:{start:{line:118,column:6},end:{line:120,column:7}},type:"if",locations:[{start:{line:118,column:6},end:{line:120,column:7}},{start:{line:118,column:6},end:{line:120,column:7}}],line:118},"13":{loc:{start:{line:126,column:11},end:{line:151,column:5}},type:"if",locations:[{start:{line:126,column:11},end:{line:151,column:5}},{start:{line:126,column:11},end:{line:151,column:5}}],line:126},"14":{loc:{start:{line:126,column:16},end:{line:126,column:71}},type:"cond-expr",locations:[{start:{line:126,column:46},end:{line:126,column:57}},{start:{line:126,column:60},end:{line:126,column:71}}],line:126},"15":{loc:{start:{line:129,column:8},end:{line:131,column:9}},type:"if",locations:[{start:{line:129,column:8},end:{line:131,column:9}},{start:{line:129,column:8},end:{line:131,column:9}}],line:129},"16":{loc:{start:{line:132,column:8},end:{line:140,column:9}},type:"if",locations:[{start:{line:132,column:8},end:{line:140,column:9}},{start:{line:132,column:8},end:{line:140,column:9}}],line:132},"17":{loc:{start:{line:133,column:10},end:{line:135,column:11}},type:"if",locations:[{start:{line:133,column:10},end:{line:135,column:11}},{start:{line:133,column:10},end:{line:135,column:11}}],line:133},"18":{loc:{start:{line:136,column:15},end:{line:140,column:9}},type:"if",locations:[{start:{line:136,column:15},end:{line:140,column:9}},{start:{line:136,column:15},end:{line:140,column:9}}],line:136},"19":{loc:{start:{line:137,column:10},end:{line:139,column:11}},type:"if",locations:[{start:{line:137,column:10},end:{line:139,column:11}},{start:{line:137,column:10},end:{line:139,column:11}}],line:137},"20":{loc:{start:{line:146,column:6},end:{line:148,column:7}},type:"if",locations:[{start:{line:146,column:6},end:{line:148,column:7}},{start:{line:146,column:6},end:{line:148,column:7}}],line:146},"21":{loc:{start:{line:146,column:10},end:{line:146,column:54}},type:"binary-expr",locations:[{start:{line:146,column:10},end:{line:146,column:22}},{start:{line:146,column:26},end:{line:146,column:30}},{start:{line:146,column:34},end:{line:146,column:54}}],line:146},"22":{loc:{start:{line:147,column:58},end:{line:147,column:75}},type:"binary-expr",locations:[{start:{line:147,column:58},end:{line:147,column:70}},{start:{line:147,column:74},end:{line:147,column:75}}],line:147},"23":{loc:{start:{line:161,column:20},end:{line:161,column:49}},type:"default-arg",locations:[{start:{line:161,column:27},end:{line:161,column:49}}],line:161},"24":{loc:{start:{line:187,column:4},end:{line:196,column:5}},type:"if",locations:[{start:{line:187,column:4},end:{line:196,column:5}},{start:{line:187,column:4},end:{line:196,column:5}}],line:187},"25":{loc:{start:{line:190,column:6},end:{line:195,column:7}},type:"if",locations:[{start:{line:190,column:6},end:{line:195,column:7}},{start:{line:190,column:6},end:{line:195,column:7}}],line:190},"26":{loc:{start:{line:197,column:17},end:{line:197,column:40}},type:"binary-expr",locations:[{start:{line:197,column:17},end:{line:197,column:26}},{start:{line:197,column:30},end:{line:197,column:40}}],line:197},"27":{loc:{start:{line:202,column:40},end:{line:202,column:65}},type:"binary-expr",locations:[{start:{line:202,column:40},end:{line:202,column:48}},{start:{line:202,column:52},end:{line:202,column:65}}],line:202},"28":{loc:{start:{line:204,column:12},end:{line:204,column:41}},type:"cond-expr",locations:[{start:{line:204,column:19},end:{line:204,column:34}},{start:{line:204,column:37},end:{line:204,column:41}}],line:204},"29":{loc:{start:{line:212,column:15},end:{line:212,column:54}},type:"cond-expr",locations:[{start:{line:212,column:27},end:{line:212,column:47}},{start:{line:212,column:50},end:{line:212,column:54}}],line:212},"30":{loc:{start:{line:223,column:13},end:{line:223,column:64}},type:"binary-expr",locations:[{start:{line:223,column:13},end:{line:223,column:56}},{start:{line:223,column:60},end:{line:223,column:64}}],line:223},"31":{loc:{start:{line:229,column:12},end:{line:229,column:56}},type:"cond-expr",locations:[{start:{line:229,column:24},end:{line:229,column:49}},{start:{line:229,column:52},end:{line:229,column:56}}],line:229},"32":{loc:{start:{line:257,column:4},end:{line:261,column:5}},type:"if",locations:[{start:{line:257,column:4},end:{line:261,column:5}},{start:{line:257,column:4},end:{line:261,column:5}}],line:257},"33":{loc:{start:{line:257,column:8},end:{line:257,column:50}},type:"binary-expr",locations:[{start:{line:257,column:8},end:{line:257,column:23}},{start:{line:257,column:27},end:{line:257,column:50}}],line:257},"34":{loc:{start:{line:284,column:6},end:{line:287,column:7}},type:"if",locations:[{start:{line:284,column:6},end:{line:287,column:7}},{start:{line:284,column:6},end:{line:287,column:7}}],line:284},"35":{loc:{start:{line:324,column:7},end:{line:324,column:30}},type:"default-arg",locations:[{start:{line:324,column:26},end:{line:324,column:30}}],line:324},"36":{loc:{start:{line:331,column:4},end:{line:350,column:5}},type:"if",locations:[{start:{line:331,column:4},end:{line:350,column:5}},{start:{line:331,column:4},end:{line:350,column:5}}],line:331},"37":{loc:{start:{line:336,column:6},end:{line:349,column:7}},type:"if",locations:[{start:{line:336,column:6},end:{line:349,column:7}},{start:{line:336,column:6},end:{line:349,column:7}}],line:336}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0],"36":[0,0],"37":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e8305b1ddbb635632adc95e381f791c4e9cdf741"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const EthereumJsTransaction=(cov_e0av3ywt9.s[0]++,require("ethereumjs-tx"));const EthereumJsFakeTransaction=(cov_e0av3ywt9.s[1]++,require("ethereumjs-tx/fake"));const ethUtil=(cov_e0av3ywt9.s[2]++,require("ethereumjs-util"));const assert=(cov_e0av3ywt9.s[3]++,require("assert"));const rlp=(cov_e0av3ywt9.s[4]++,require("rlp"));const to=(cov_e0av3ywt9.s[5]++,require("./to"));const sign=(cov_e0av3ywt9.s[6]++,EthereumJsTransaction.prototype.sign);cov_e0av3ywt9.s[7]++;const fakeHash=function(){cov_e0av3ywt9.f[0]++;cov_e0av3ywt9.s[8]++;// this isn't memoization of the hash. previous versions of ganache-core
// created hashes in a different/incorrect way and are recorded this way
// in snapshot dbs. We are preserving the chain's immutability by using the
// stored hash instead of calculating it.
if(this._hash!=null){cov_e0av3ywt9.b[0][0]++;cov_e0av3ywt9.s[9]++;return this._hash;}else{cov_e0av3ywt9.b[0][1]++;}cov_e0av3ywt9.s[10]++;return EthereumJsFakeTransaction.prototype.hash.apply(this,arguments);};const BUFFER_ZERO=(cov_e0av3ywt9.s[11]++,Buffer.from([0]));function configZeroableField(tx,fieldName,fieldLength=(cov_e0av3ywt9.b[1][0]++,32)){cov_e0av3ywt9.f[1]++;const index=(cov_e0av3ywt9.s[12]++,tx._fields.indexOf(fieldName));const descriptor=(cov_e0av3ywt9.s[13]++,Object.getOwnPropertyDescriptor(tx,fieldName));// eslint-disable-next-line accessor-pairs
cov_e0av3ywt9.s[14]++;Object.defineProperty(tx,fieldName,{set:v=>{cov_e0av3ywt9.f[2]++;cov_e0av3ywt9.s[15]++;descriptor.set.call(tx,v);cov_e0av3ywt9.s[16]++;v=ethUtil.toBuffer(v);cov_e0av3ywt9.s[17]++;assert(fieldLength>=v.length,`The field ${fieldName} must not have more ${fieldLength} bytes`);cov_e0av3ywt9.s[18]++;tx._originals[index]=v;},get:()=>{cov_e0av3ywt9.f[3]++;cov_e0av3ywt9.s[19]++;return tx._originals[index];}});}/**
 * etheruemjs-tx's Transactions don't behave quite like we need them to, so
 * we're monkey-patching them to do what we want here.
 * @param {Transaction} tx The Transaction to fix
 * @param {Object} [data] The data object
 */function fixProps(tx,data){cov_e0av3ywt9.f[4]++;cov_e0av3ywt9.s[20]++;// ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to
// in order to differentiate between a value that isn't set and a value
// that is set to 0 in a fake transaction.
// Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is figured
// out we can probably remove this fix/hack.
// We keep track of the original value and return that value when
// referenced by its property name. This lets us properly encode a `0` as
// an empty buffer while still being able to differentiate between a `0`
// and `null`/`undefined`.
tx._originals=[];const fieldNames=(cov_e0av3ywt9.s[21]++,["nonce","gasPrice","gasLimit","value"]);cov_e0av3ywt9.s[22]++;fieldNames.forEach(fieldName=>{cov_e0av3ywt9.f[5]++;cov_e0av3ywt9.s[23]++;return configZeroableField(tx,fieldName,32);});// Ethereumjs-tx doesn't set the _chainId value whenever the v value is set,
// which causes transaction signing to fail on transactions that include a
// chain id in the v value (like ethers.js does).
// Whenever the v value changes we need to make sure the chainId is also set.
const vDescriptors=(cov_e0av3ywt9.s[24]++,Object.getOwnPropertyDescriptor(tx,"v"));// eslint-disable-next-line accessor-pairs
cov_e0av3ywt9.s[25]++;Object.defineProperty(tx,"v",{set:v=>{cov_e0av3ywt9.f[6]++;cov_e0av3ywt9.s[26]++;vDescriptors.set.call(tx,v);// calculate chainId from signature
const sigV=(cov_e0av3ywt9.s[27]++,ethUtil.bufferToInt(tx.v));let chainId=(cov_e0av3ywt9.s[28]++,Math.floor((sigV-35)/2));cov_e0av3ywt9.s[29]++;if(chainId<0){cov_e0av3ywt9.b[2][0]++;cov_e0av3ywt9.s[30]++;chainId=0;}else{cov_e0av3ywt9.b[2][1]++;}cov_e0av3ywt9.s[31]++;tx._chainId=(cov_e0av3ywt9.b[3][0]++,chainId)||(cov_e0av3ywt9.b[3][1]++,0);}});cov_e0av3ywt9.s[32]++;if(tx.isFake()){cov_e0av3ywt9.b[4][0]++;cov_e0av3ywt9.s[33]++;/**
     * @prop {Buffer} from (read/write) Set from address to bypass transaction
     * signing on fake transactions.
     */Object.defineProperty(tx,"from",{enumerable:true,configurable:true,get:tx.getSenderAddress.bind(tx),set:val=>{cov_e0av3ywt9.f[7]++;cov_e0av3ywt9.s[34]++;if(val){cov_e0av3ywt9.b[5][0]++;cov_e0av3ywt9.s[35]++;tx._from=ethUtil.toBuffer(val);}else{cov_e0av3ywt9.b[5][1]++;cov_e0av3ywt9.s[36]++;tx._from=null;}}});cov_e0av3ywt9.s[37]++;if((cov_e0av3ywt9.b[7][0]++,data)&&(cov_e0av3ywt9.b[7][1]++,data.from)){cov_e0av3ywt9.b[6][0]++;cov_e0av3ywt9.s[38]++;tx.from=data.from;}else{cov_e0av3ywt9.b[6][1]++;}cov_e0av3ywt9.s[39]++;tx.hash=fakeHash;}else{cov_e0av3ywt9.b[4][1]++;}}/**
 * Parses the given data object and adds its properties to the given tx.
 * @param {Transaction} tx
 * @param {Object} [data]
 */function initData(tx,data){cov_e0av3ywt9.f[8]++;cov_e0av3ywt9.s[40]++;if(data){cov_e0av3ywt9.b[8][0]++;cov_e0av3ywt9.s[41]++;if(typeof data==="string"){cov_e0av3ywt9.b[9][0]++;cov_e0av3ywt9.s[42]++;data=to.buffer(data);}else{cov_e0av3ywt9.b[9][1]++;}cov_e0av3ywt9.s[43]++;if(Buffer.isBuffer(data)){cov_e0av3ywt9.b[10][0]++;cov_e0av3ywt9.s[44]++;data=rlp.decode(data);}else{cov_e0av3ywt9.b[10][1]++;}const self=(cov_e0av3ywt9.s[45]++,tx);cov_e0av3ywt9.s[46]++;if(Array.isArray(data)){cov_e0av3ywt9.b[11][0]++;cov_e0av3ywt9.s[47]++;if(data.length>tx._fields.length){cov_e0av3ywt9.b[12][0]++;cov_e0av3ywt9.s[48]++;throw new Error("wrong number of fields in data");}else{cov_e0av3ywt9.b[12][1]++;}// make sure all the items are buffers
cov_e0av3ywt9.s[49]++;data.forEach((d,i)=>{cov_e0av3ywt9.f[9]++;cov_e0av3ywt9.s[50]++;self[self._fields[i]]=ethUtil.toBuffer(d);});}else{cov_e0av3ywt9.b[11][1]++;cov_e0av3ywt9.s[51]++;if((typeof data==="undefined"?(cov_e0av3ywt9.b[14][0]++,"undefined"):(cov_e0av3ywt9.b[14][1]++,typeof data))==="object"){cov_e0av3ywt9.b[13][0]++;const keys=(cov_e0av3ywt9.s[52]++,Object.keys(data));cov_e0av3ywt9.s[53]++;tx._fields.forEach(function(field){cov_e0av3ywt9.f[10]++;cov_e0av3ywt9.s[54]++;if(keys.indexOf(field)!==-1){cov_e0av3ywt9.b[15][0]++;cov_e0av3ywt9.s[55]++;self[field]=data[field];}else{cov_e0av3ywt9.b[15][1]++;}cov_e0av3ywt9.s[56]++;if(field==="gasLimit"){cov_e0av3ywt9.b[16][0]++;cov_e0av3ywt9.s[57]++;if(keys.indexOf("gas")!==-1){cov_e0av3ywt9.b[17][0]++;cov_e0av3ywt9.s[58]++;self["gas"]=data["gas"];}else{cov_e0av3ywt9.b[17][1]++;}}else{cov_e0av3ywt9.b[16][1]++;cov_e0av3ywt9.s[59]++;if(field==="data"){cov_e0av3ywt9.b[18][0]++;cov_e0av3ywt9.s[60]++;if(keys.indexOf("input")!==-1){cov_e0av3ywt9.b[19][0]++;cov_e0av3ywt9.s[61]++;self["input"]=data["input"];}else{cov_e0av3ywt9.b[19][1]++;}}else{cov_e0av3ywt9.b[18][1]++;}}});// Set chainId value from the data, if it's there and the data didn't
// contain a `v` value with chainId in it already. If we do have a
// data.chainId value let's set the interval v value to it.
cov_e0av3ywt9.s[62]++;if((cov_e0av3ywt9.b[21][0]++,!tx._chainId)&&(cov_e0av3ywt9.b[21][1]++,data)&&(cov_e0av3ywt9.b[21][2]++,data.chainId!=null)){cov_e0av3ywt9.b[20][0]++;cov_e0av3ywt9.s[63]++;tx.raw[self._fields.indexOf("v")]=tx._chainId=(cov_e0av3ywt9.b[22][0]++,data.chainId)||(cov_e0av3ywt9.b[22][1]++,0);}else{cov_e0av3ywt9.b[20][1]++;}}else{cov_e0av3ywt9.b[13][1]++;cov_e0av3ywt9.s[64]++;throw new Error("invalid data");}}}else{cov_e0av3ywt9.b[8][1]++;}}cov_e0av3ywt9.s[65]++;module.exports=class Transaction extends EthereumJsTransaction{/**
   * @param {Object} [data] The data for this Transaction.
   * @param {Number} type The `Transaction.types` bit flag for this transaction
   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.
   */constructor(data,type=(cov_e0av3ywt9.b[23][0]++,Transaction.types.none)){cov_e0av3ywt9.f[11]++;cov_e0av3ywt9.s[66]++;super();cov_e0av3ywt9.s[67]++;this.type=type;cov_e0av3ywt9.s[68]++;fixProps(this,data);cov_e0av3ywt9.s[69]++;initData(this,data);}static get types(){cov_e0av3ywt9.f[12]++;cov_e0av3ywt9.s[70]++;// values must be powers of 2
return{none:0,signed:1,fake:2};}/**
   * Prepares arbitrary JSON data for use in a Transaction.
   * @param {Object} json JSON object representing the Transaction
   * @param {Number} type The `Transaction.types` bit flag for this transaction
   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.
   */static fromJSON(json,type){cov_e0av3ywt9.f[13]++;let toAccount;cov_e0av3ywt9.s[71]++;if(json.to){cov_e0av3ywt9.b[24][0]++;// Remove all padding and make it easily comparible.
const buf=(cov_e0av3ywt9.s[72]++,to.buffer(json.to));cov_e0av3ywt9.s[73]++;if(buf.equals(Buffer.from([0]))){cov_e0av3ywt9.b[25][0]++;cov_e0av3ywt9.s[74]++;// if the address is 0x0 make it 0x0{20}
toAccount=ethUtil.setLengthLeft(buf,20);}else{cov_e0av3ywt9.b[25][1]++;cov_e0av3ywt9.s[75]++;toAccount=buf;}}else{cov_e0av3ywt9.b[24][1]++;}const data=(cov_e0av3ywt9.s[76]++,(cov_e0av3ywt9.b[26][0]++,json.data)||(cov_e0av3ywt9.b[26][1]++,json.input));const options=(cov_e0av3ywt9.s[77]++,{nonce:ethUtil.toBuffer(to.hex(json.nonce)),from:ethUtil.toBuffer(to.hex(json.from)),value:ethUtil.toBuffer(to.hex(json.value)),gasLimit:ethUtil.toBuffer(to.hex((cov_e0av3ywt9.b[27][0]++,json.gas)||(cov_e0av3ywt9.b[27][1]++,json.gasLimit))),gasPrice:ethUtil.toBuffer(to.hex(json.gasPrice)),data:data?(cov_e0av3ywt9.b[28][0]++,to.buffer(data)):(cov_e0av3ywt9.b[28][1]++,null),to:toAccount,v:ethUtil.toBuffer(json.v),r:ethUtil.toBuffer(json.r),s:ethUtil.toBuffer(json.s)});const tx=(cov_e0av3ywt9.s[78]++,new Transaction(options,type));cov_e0av3ywt9.s[79]++;tx._hash=json.hash?(cov_e0av3ywt9.b[29][0]++,to.buffer(json.hash)):(cov_e0av3ywt9.b[29][1]++,null);cov_e0av3ywt9.s[80]++;return tx;}/**
   * Encodes the Transaction in order to be used in a database. Can be decoded
   * into an identical Transaction via `Transaction.decode(encodedTx)`.
   */encode(){cov_e0av3ywt9.f[14]++;const resultJSON=(cov_e0av3ywt9.s[81]++,{hash:to.nullableRpcDataHexString(this.hash()),nonce:(cov_e0av3ywt9.b[30][0]++,to.nullableRpcQuantityHexString(this.nonce))||(cov_e0av3ywt9.b[30][1]++,"0x"),from:to.rpcDataHexString(this.from),to:to.nullableRpcDataHexString(this.to),value:to.nullableRpcQuantityHexString(this.value),gas:to.nullableRpcQuantityHexString(this.gasLimit),gasPrice:to.nullableRpcQuantityHexString(this.gasPrice),data:this.data?(cov_e0av3ywt9.b[31][0]++,this.data.toString("hex")):(cov_e0av3ywt9.b[31][1]++,null),v:to.nullableRpcQuantityHexString(this.v),r:to.nullableRpcDataHexString(this.r),s:to.nullableRpcDataHexString(this.s),_type:this.type});cov_e0av3ywt9.s[82]++;return resultJSON;}isFake(){cov_e0av3ywt9.f[15]++;cov_e0av3ywt9.s[83]++;return(this.type&Transaction.types.fake)===Transaction.types.fake;}isSigned(){cov_e0av3ywt9.f[16]++;cov_e0av3ywt9.s[84]++;return(this.type&Transaction.types.signed)===Transaction.types.signed;}/**
   * Compares the transaction's nonce value to the given expectedNonce taking in
   * to account the type of transaction and comparison rules for each type.
   *
   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),
   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.
   *
   * @param {Buffer} expectedNonce The value of the from account's next nonce.
   */validateNonce(expectedNonce){cov_e0av3ywt9.f[17]++;let nonce;cov_e0av3ywt9.s[85]++;if((cov_e0av3ywt9.b[33][0]++,this.isSigned())&&(cov_e0av3ywt9.b[33][1]++,this.nonce.length===0)){cov_e0av3ywt9.b[32][0]++;cov_e0av3ywt9.s[86]++;nonce=BUFFER_ZERO;}else{cov_e0av3ywt9.b[32][1]++;cov_e0av3ywt9.s[87]++;nonce=this.nonce;}cov_e0av3ywt9.s[88]++;return nonce.equals(expectedNonce);}/**
   * Signs the transaction and sets the `type` bit for `signed` to 1,
   * i.e., `isSigned() === true`
   */sign(){cov_e0av3ywt9.f[18]++;cov_e0av3ywt9.s[89]++;sign.apply(this,arguments);cov_e0av3ywt9.s[90]++;this.type|=Transaction.types.signed;}/**
   * Returns a JSON-RPC spec compliant representation of this Transaction.
   *
   * @param {Object} block The block this Transaction appears in.
   */toJsonRpc(block){cov_e0av3ywt9.f[19]++;const hash=(cov_e0av3ywt9.s[91]++,this.hash());let transactionIndex=(cov_e0av3ywt9.s[92]++,null);cov_e0av3ywt9.s[93]++;for(let i=(cov_e0av3ywt9.s[94]++,0),txns=(cov_e0av3ywt9.s[95]++,block.transactions),l=(cov_e0av3ywt9.s[96]++,txns.length);i<l;i++){cov_e0av3ywt9.s[97]++;if(txns[i].hash().equals(hash)){cov_e0av3ywt9.b[34][0]++;cov_e0av3ywt9.s[98]++;transactionIndex=i;cov_e0av3ywt9.s[99]++;break;}else{cov_e0av3ywt9.b[34][1]++;}}const resultJSON=(cov_e0av3ywt9.s[100]++,{hash:to.nullableRpcDataHexString(hash),nonce:to.rpcQuantityHexString(this.nonce),blockHash:to.nullableRpcDataHexString(block.hash()),blockNumber:to.nullableRpcQuantityHexString(block.header.number),transactionIndex:to.nullableRpcQuantityHexString(transactionIndex),from:to.rpcDataHexString(this.from),to:to.nullableRpcDataHexString(this.to),value:to.rpcQuantityHexString(this.value),gas:to.rpcQuantityHexString(this.gasLimit),gasPrice:to.rpcQuantityHexString(this.gasPrice),input:to.rpcDataHexString(this.data),v:to.nullableRpcQuantityHexString(this.v),r:to.nullableRpcDataHexString(this.r),s:to.nullableRpcDataHexString(this.s)});cov_e0av3ywt9.s[101]++;return resultJSON;}/**
   * Computes a sha3-256 hash of the serialized tx
   *
   * This method is nearly identical to ethereumjs-tx hash with the exception of
   * the v,r,s value setting when _chainId > 0. Because the `_chainId` in our
   * implementation is calculated whenever the v is updated we have to make sure
   * we don't recalc the chainId when we set the v to soemthing else.
   *
   * Note: If the transaction is a fake transaction this hash method gets
   * overridden in the constructor.
   *
   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
   * @return {Buffer}
   */hash(includeSignature=(cov_e0av3ywt9.b[35][0]++,true)){cov_e0av3ywt9.f[20]++;// EIP155 spec:
// when computing the hash of a transaction for purposes of signing or recovering,
// instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0
let items;cov_e0av3ywt9.s[102]++;if(includeSignature){cov_e0av3ywt9.b[36][0]++;cov_e0av3ywt9.s[103]++;items=this.raw;}else{cov_e0av3ywt9.b[36][1]++;// cache the chainId here
const chainId=(cov_e0av3ywt9.s[104]++,this._chainId);cov_e0av3ywt9.s[105]++;if(chainId>0){cov_e0av3ywt9.b[37][0]++;const cacheRaw=(cov_e0av3ywt9.s[106]++,this.raw.slice());// Setting `this.v` changes the value of `this._chainId`
cov_e0av3ywt9.s[107]++;this.v=chainId;cov_e0av3ywt9.s[108]++;this.r=0;cov_e0av3ywt9.s[109]++;this.s=0;cov_e0av3ywt9.s[110]++;items=this.raw;cov_e0av3ywt9.s[111]++;this.raw=cacheRaw;// set the chainId back to its original value here.
cov_e0av3ywt9.s[112]++;this._chainId=chainId;}else{cov_e0av3ywt9.b[37][1]++;cov_e0av3ywt9.s[113]++;items=this.raw.slice(0,6);}}// create hash
cov_e0av3ywt9.s[114]++;return ethUtil.rlphash(items);}};