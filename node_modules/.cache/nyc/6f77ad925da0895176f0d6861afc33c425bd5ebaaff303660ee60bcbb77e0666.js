var cov_wvgnurv6w=function(){var path="/Users/Tyler/ganache-fork/ganache-core/lib/utils/random.js";var hash="adceb82c811d0a94fdeb7c8a7442d27ec2f2d7a9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/Tyler/ganache-fork/ganache-core/lib/utils/random.js",statementMap:{"0":{start:{line:1,column:0},end:{line:28,column:2}},"1":{start:{line:8,column:14},end:{line:8,column:16}},"2":{start:{line:10,column:4},end:{line:12,column:5}},"3":{start:{line:10,column:17},end:{line:10,column:18}},"4":{start:{line:11,column:6},end:{line:11,column:28}},"5":{start:{line:14,column:4},end:{line:14,column:28}},"6":{start:{line:18,column:21},end:{line:18,column:85}},"7":{start:{line:20,column:15},end:{line:20,column:17}},"8":{start:{line:22,column:4},end:{line:24,column:5}},"9":{start:{line:22,column:17},end:{line:22,column:18}},"10":{start:{line:23,column:6},end:{line:23,column:84}},"11":{start:{line:26,column:4},end:{line:26,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:15},end:{line:7,column:16}},loc:{start:{line:7,column:37},end:{line:15,column:3}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:28},end:{line:17,column:29}},loc:{start:{line:17,column:50},end:{line:27,column:3}},line:17}},branchMap:{"0":{loc:{start:{line:23,column:42},end:{line:23,column:60}},type:"binary-expr",locations:[{start:{line:23,column:42},end:{line:23,column:45}},{start:{line:23,column:49},end:{line:23,column:60}}],line:23}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"adceb82c811d0a94fdeb7c8a7442d27ec2f2d7a9"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_wvgnurv6w.s[0]++;module.exports={// Mimics crypto.random bytes, but takes in a random number generator
// as its second parameter. rng is expected to be a function that takes
// no parameters and returns a result like Math.random().
// This is important because it allows for a seeded random number generator.
// Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.
randomBytes:function(length,rng){cov_wvgnurv6w.f[0]++;var buf=(cov_wvgnurv6w.s[1]++,[]);cov_wvgnurv6w.s[2]++;for(var i=(cov_wvgnurv6w.s[3]++,0);i<length;i++){cov_wvgnurv6w.s[4]++;buf.push(rng()*255);}cov_wvgnurv6w.s[5]++;return Buffer.from(buf);},randomAlphaNumericString:function(length,rng){cov_wvgnurv6w.f[1]++;const alphabet=(cov_wvgnurv6w.s[6]++,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");let text=(cov_wvgnurv6w.s[7]++,"");cov_wvgnurv6w.s[8]++;for(var i=(cov_wvgnurv6w.s[9]++,0);i<length;i++){cov_wvgnurv6w.s[10]++;text+=alphabet.charAt(Math.floor(((cov_wvgnurv6w.b[0][0]++,rng)||(cov_wvgnurv6w.b[0][1]++,Math.random))()*alphabet.length));}cov_wvgnurv6w.s[11]++;return text;}};