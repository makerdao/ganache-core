var cov_21ubaghqtd=function(){var path="/Users/Tyler/ganache-fork/ganache-core/lib/database/txserializer.js";var hash="7a91c483148e42702604b54bb74a1fc0edbfcc02";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/Tyler/ganache-fork/ganache-core/lib/database/txserializer.js",statementMap:{"0":{start:{line:2,column:18},end:{line:2,column:49}},"1":{start:{line:4,column:15},end:{line:42,column:1}},"2":{start:{line:5,column:18},end:{line:17,column:3}},"3":{start:{line:22,column:15},end:{line:22,column:77}},"4":{start:{line:23,column:13},end:{line:23,column:48}},"5":{start:{line:41,column:2},end:{line:41,column:17}},"6":{start:{line:44,column:15},end:{line:47,column:1}},"7":{start:{line:45,column:18},end:{line:45,column:29}},"8":{start:{line:46,column:2},end:{line:46,column:22}},"9":{start:{line:49,column:0},end:{line:52,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:15},end:{line:4,column:16}},loc:{start:{line:4,column:36},end:{line:42,column:1}},line:4},"1":{name:"(anonymous_1)",decl:{start:{line:44,column:15},end:{line:44,column:16}},loc:{start:{line:44,column:34},end:{line:47,column:1}},line:44}},branchMap:{"0":{loc:{start:{line:11,column:14},end:{line:11,column:39}},type:"binary-expr",locations:[{start:{line:11,column:14},end:{line:11,column:22}},{start:{line:11,column:26},end:{line:11,column:39}}],line:11},"1":{loc:{start:{line:22,column:15},end:{line:22,column:77}},type:"cond-expr",locations:[{start:{line:22,column:42},end:{line:22,column:64}},{start:{line:22,column:67},end:{line:22,column:77}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"7a91c483148e42702604b54bb74a1fc0edbfcc02"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();// var to = require("../utils/to");
var Transaction=(cov_21ubaghqtd.s[0]++,require("../utils/transaction"));cov_21ubaghqtd.s[1]++;const decode=function(json,done){cov_21ubaghqtd.f[0]++;const options=(cov_21ubaghqtd.s[2]++,{hash:json.hash,nonce:json.nonce,value:json.value,to:json.to,from:json.from,gasLimit:(cov_21ubaghqtd.b[0][0]++,json.gas)||(cov_21ubaghqtd.b[0][1]++,json.gasLimit),gasPrice:json.gasPrice,data:json.data,v:json.v,r:json.r,s:json.s});// databases generated before ganache-core@2.3.2 didn't have a `_type` and
// and were always fake signed. So if _type is undefined it is "fake" (even
// if we have a valid signature that can generate the tx's `from`).
const type=(cov_21ubaghqtd.s[3]++,json._type===undefined?(cov_21ubaghqtd.b[1][0]++,Transaction.types.fake):(cov_21ubaghqtd.b[1][1]++,json._type));const tx=(cov_21ubaghqtd.s[4]++,Transaction.fromJSON(options,type));// Commenting this out because we don't want to throw if the json.hash we
// put in is different that the tx.hash() calculation we now have. There
// may have been bug fixes to the way transactions are hashed in future
// versions of ganache-core, but we still want tobe able to read in
// transactions from previously saved databases!
// if (to.hex(tx.hash()) !== json.hash) {
//   const e = new Error(
//     "DB consistency check: Decoded transaction hash " +
//       "didn't match encoded hash. Expected: " +
//       json.hash +
//       "; actual: " +
//       to.hex(tx.hash())
//   );
//   return done(e);
// }
cov_21ubaghqtd.s[5]++;done(null,tx);};cov_21ubaghqtd.s[6]++;const encode=function(tx,done){cov_21ubaghqtd.f[1]++;const encoded=(cov_21ubaghqtd.s[7]++,tx.encode());cov_21ubaghqtd.s[8]++;done(null,encoded);};cov_21ubaghqtd.s[9]++;module.exports={encode,decode};